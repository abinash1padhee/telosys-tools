#set ( $DAO_CLASS = "${beanClass.name}DAO" )
#set ( $SCREEN_DATA_CLASS = "${beanClass.name}Data" )
#set ( $getBeanDAO = "get${beanClass.name}DAO" )
/*
 * Screen Manager class 
 * Created on $today.date ( Time $today.time )
 */

//package org.demo.screen.${beanClass.name.toLowerCase()} ;
package ${target.javaPackageFromFolder($SRC)} ;

import org.objectweb.telosys.common.TelosysException;
import org.objectweb.telosys.dal.dao.DatabaseSession;
import org.objectweb.telosys.rpl.ScreenRequest;
import org.objectweb.telosys.rpl.ScreenRequestParameters;
import org.objectweb.telosys.rpl.ScreenResponse;
import org.objectweb.telosys.screen.core.ScreenContext;
import org.objectweb.telosys.screen.core.ScreenData;
import org.objectweb.telosys.screen.core.StandardScreenManager;
import org.objectweb.telosys.screen.env.ScreenSession;

import $beanClass.fullName;
import ${PKG_DAO}.${DAO_CLASS};

/**
 * Screen Manager for entity $beanClass.name ( server-side actions implementation )
 *
 * @author xx
 *
 */
public class ${beanClass.name}Mgr extends StandardScreenManager
{
    /**
     * Default constructor.
     */
    public ${beanClass.name}Mgr()
    {
		super( ${beanClass.name}Data.class ); // Use the default database
		// super( ${beanClass.name}Data.class, 1 ); // Use the database #1
		// super( ${beanClass.name}Data.class, NO_DATABASE ); // Do not use any database		
	}
	
	//--------------------------------------------------------------------------------------------------
	
	/**
	 * Set the Primary Key in the bean's attributes using the request parameters
	 * @param bean
	 * @param request
	 * @throws TelosysException
	 */
	private void setPrimaryKey(${beanClass.name} bean, ScreenRequest request) throws TelosysException 
	{
		setPrimaryKey( bean, request.getParameters() );
	}

	/**
	 * Set the Primary Key in the bean's attributes using the request parameters
	 * @param bean
	 * @param params
	 * @throws TelosysException
	 */
	private void setPrimaryKey(${beanClass.name} bean, ScreenRequestParameters params) throws TelosysException 
	{
#foreach( $attr in $beanClass.keyAttributes )
		bean.${attr.setter}( params.${attr.reqParamGetter}("${attr.name}") ); // $attr.fullType : ${beanClass.sqlTable}.${attr.databaseName}
#end
	}

	//--------------------------------------------------------------------------------------------------

	/**
	 * Returns true if the request contains parameter(s) for the Primary Key
	 * @param request
	 * @return
	 */
	private boolean hasPrimaryKey(ScreenRequest request) 
	{
		return hasPrimaryKey( request.getParameters() ) ;
	}

	/**
	 * Returns true if the request contains parameter(s) for the Primary Key
	 * @param params
	 * @return
	 */
	private boolean hasPrimaryKey(ScreenRequestParameters params) 
	{
#foreach( $attr in $beanClass.keyAttributes )
		if ( params.getParameter("${attr.name}") == null ) return false ;
#end
		return true ;
	}

	//--------------------------------------------------------------------------------------------------
    
	/**
	 * Returns the DAO for the "${beanClass.name}" entity
	 * @param dbSession
	 * @return
	 * @throws TelosysException
	 */
	private $DAO_CLASS ${getBeanDAO}(DatabaseSession dbSession) throws TelosysException
	{
    	return ($DAO_CLASS) getDAO( ${beanClass.name}.class, dbSession ) ;
	}

	/**
	 * Try to load a new "${beanClass.name}" entity in the ScreenContext using the given request parameters
	 * @param params the parameters including the entity primary key
	 * @param data the ScreenContext data (where to store the data loaded)
	 * @param dbSession
	 * @throws TelosysException
	 */
	private void loadByPrimaryKey( ScreenRequestParameters params, $SCREEN_DATA_CLASS data, DatabaseSession dbSession ) throws TelosysException
	{
		$DAO_CLASS dao = ${getBeanDAO}(dbSession) ;
		${beanClass.name} bean = new ${beanClass.name}();
		setPrimaryKey(bean, params); 
		
		int iRet = dao.load(bean, dbSession);
		
		if ( iRet > 0 ) // if found 
		{
			//--- Populate the Screen Data ...
			data.set${beanClass.name}(bean);
			data.setFound(); // Consider as "found"
			//--- Load other related data if necessary
			// use other VO and DAO
			System.out.println("loadByPrimaryKey : FOUND ");
		}
		else
		{
			data.clearElements();
			data.setNotFound(); // Consider as "not found"
			System.out.println("loadByPrimaryKey : NOT FOUND ");
		}
	}

	
	/* 
	 * Screen Context life cycle notification : a new screen context has been "created" 
	 */
	public void onCreate(ScreenContext screenContext,
			ScreenRequestParameters params, ScreenSession screenSession,
			DatabaseSession dbSession) throws TelosysException 
	{
		// You can do something here ... 
		// for example init the screen context data using the ScreenRequestParameters
		System.out.println("onCreate ... " );
		if ( hasPrimaryKey(params) )
		{
			loadByPrimaryKey(params, ($SCREEN_DATA_CLASS)screenContext.getOrCreateCurrentData(), dbSession );
		}
	}


	/* 
	 * Screen Context life cycle notification : the existing screen context has been "reused" 
	 */
	public void onReuse(ScreenContext screenContext,
			ScreenRequestParameters params, ScreenSession screenSession,
			DatabaseSession dbSession) throws TelosysException 
	{
		// You can do something here ... 
	}

	
	/* 
	 * Implementation of the standard "LOAD" action
	 */
	public void load(ScreenData screenData, ScreenContext context, ScreenRequest request, ScreenResponse response, DatabaseSession dbSession) throws TelosysException 
	{
		loadByPrimaryKey( request.getParameters(), ($SCREEN_DATA_CLASS) screenData, dbSession );
	}
	
	/* 
	 * Implementation of the standard "SAVE" action
	 */
	public void save(ScreenData screenData, ScreenContext context, ScreenRequest request, ScreenResponse response, DatabaseSession dbSession) throws TelosysException 
	{
		$SCREEN_DATA_CLASS data = ($SCREEN_DATA_CLASS) screenData ;
    	//--- SAVE BEAN ( after set )
		${beanClass.name} bean = data.get${beanClass.name}();
    	if ( bean != null )
    	{
			${DAO_CLASS} dao = ${getBeanDAO}(dbSession) ;
    		dao.save(bean, dbSession);
    	}
	}

	/* 
	 * Implementation of the standard "INSERT" action
	 */
	public void insert(ScreenData screenData, ScreenContext context, ScreenRequest request, ScreenResponse response, DatabaseSession dbSession) throws TelosysException 
	{
		$SCREEN_DATA_CLASS data = ($SCREEN_DATA_CLASS) screenData ;
    	//--- INSERT BEAN
		${beanClass.name} bean = data.get${beanClass.name}();
    	if ( bean != null )
    	{
			${DAO_CLASS} dao = ${getBeanDAO}(dbSession) ;
    		dao.insert(bean, dbSession);
    	}
	}

	/* 
	 * Implementation of the standard "UPDATE" action
	 */
	public void update(ScreenData screenData, ScreenContext context, ScreenRequest request, ScreenResponse response, DatabaseSession dbSession) throws TelosysException 
	{
		$SCREEN_DATA_CLASS data = ($SCREEN_DATA_CLASS) screenData ;
    	//--- UPDATE BEAN
		${beanClass.name} bean = data.get${beanClass.name}();
    	if ( bean != null )
    	{
			${DAO_CLASS} dao = ${getBeanDAO}(dbSession) ;
    		dao.update(bean, dbSession);
    	}
	}

	/* 
	 * Implementation of the standard "DELETE" action
	 */
	public void delete(ScreenData screenData, ScreenContext context, ScreenRequest request, ScreenResponse response, DatabaseSession dbSession) throws TelosysException 
	{
		if ( hasPrimaryKey(request) )
		{
			delete_by_primary_key(request, response, dbSession);
		}
		else
		{
			delete_current(context, request, response, dbSession);
		}
		context.clearCurrentData();
	}
	
	/**
	 * Deletes the entity using the Primary Key received as request parameter(s)
	 * @param request
	 * @param response
	 * @param dbSession
	 * @throws TelosysException
	 */
	private void delete_by_primary_key(ScreenRequest request, ScreenResponse response, DatabaseSession dbSession) throws TelosysException 
	{
    	//--- DELETE the PRIMARY KEY RECEIVED as REQUEST PARAMETER
    	${beanClass.name} bean = new ${beanClass.name}();
		setPrimaryKey(bean, request); 
		${DAO_CLASS} dao = ${getBeanDAO}(dbSession) ;

		int iRet = dao.delete(bean, dbSession);
		if ( iRet > 0 )
		{
    		response.setReturnMessage("Bean deleted by primary key");
		}
		else
		{
    		response.setReturnMessage("No bean deleted for the given primary key");
		}
	}

	/**
	 * Deletes the entity using the Primary Key of the element stored in the current ScreenData
	 * @param context
	 * @param request
	 * @param response
	 * @param dbSession
	 * @throws TelosysException
	 */
	private void delete_current(ScreenContext context, ScreenRequest request, ScreenResponse response, DatabaseSession dbSession) throws TelosysException 
	{
    	//--- DELETE CURRENT BEAN    	
		$SCREEN_DATA_CLASS data = ($SCREEN_DATA_CLASS) context.getCurrentData() ;
		${beanClass.name} bean = data.get${beanClass.name}();
    	
    	if ( bean != null )
    	{
			${DAO_CLASS} dao = ${getBeanDAO}(dbSession) ;
    		dao.delete(bean, dbSession);
    		data.clearElements();
    		response.setReturnMessage("Current bean has been deleted");
    	}
    	else
    	{
    		response.setReturnMessage("No current bean, nothing deleted");
    	}
	}
}
