#set ( $DAO_CLASS = "${beanClass.name}DAO" )
#set ( $LIST_CLASS = "${beanClass.name}List" )
/*
 * Screen Procedure class 
 * Created on $today.date ( Time $today.time )
 */

package org.demo.screen.${beanClass.name.toLowerCase()} ;

import org.objectweb.telosys.common.TelosysException;
import org.objectweb.telosys.dal.dao.ListQuery;
import org.objectweb.telosys.dal.sql.Criteria;
import org.objectweb.telosys.dal.sql.Criterion;
import org.objectweb.telosys.dal.sql.ParamType;
import org.objectweb.telosys.rpl.ScreenRequest;
import org.objectweb.telosys.rpl.ScreenResponse;
import org.objectweb.telosys.screen.core.ScreenContext;
import org.objectweb.telosys.screen.core.ScreenError;
import org.objectweb.telosys.screen.core.StandardScreenProcedures;

import org.demo.env.AppConst; 

import $beanClass.fullName; // Entity Bean
## import $listClass.fullName; // Entity List
import ${PKG_LIST}.${LIST_CLASS};
## import $daoClass.fullName; // Entity DAO
import ${PKG_DAO}.${DAO_CLASS};

/**
 * Screen Procedures for entity $beanClass.name ( server-side exec actions implementation )
 *
 * @author xx
 *
 */
public class ${beanClass.name}Proc extends StandardScreenProcedures
{
    //--- Define the dynamic criteria for a standard search on this entity
    private final static Criterion[] SQL_CRITERIA = 
	{ 
    	// NB : Do not use Criterion for "long text" and BLOB attributes
##        new Criterion("CODE like ?",       ParamType.STRING,  "code" ),      /* p1 */
##        new Criterion("SHOP_CODE like ?",  ParamType.STRING,  "shopCode" ),  /* p2 */
##        new Criterion("FIRST_NAME like ?", ParamType.STRING,  "firstName" ), /* p3 */
##        new Criterion("LAST_NAME like ?",  ParamType.STRING,  "lastName" ),  /* p4 */
##        new Criterion("MANAGER = ?",       ParamType.INTEGER, "manager" )    /* p5 */
#set ( $flagFirst = 0 )
#foreach( $field in $beanClass.attributes )
#if ( $flagFirst != 0 )		,
#end
#set ( $flagFirst = 1 )
#if ( $field.type == "String" )
		new Criterion("$field.databaseName like ?", ParamType.$field.type.toUpperCase(), "$field.name" ) // Java type : $field.type , DB type : $field.databaseType  
#else
		new Criterion("$field.databaseName = ?",    ParamType.$field.type.toUpperCase(), "$field.name" ) // Java type : $field.type , DB type : $field.databaseType
#end
#end
    };

	/*
	 * Implements ScreenProcedures.execute()
	 * @see org.objectweb.telosys.screen.core.ScreenProcedures#execute
	 */
    public boolean execute(String sProcName, ScreenContext screen, ScreenRequest request, ScreenResponse response ) throws TelosysException
    {    	
    	if ( "search".equals(sProcName) ) return search( screen, request, response );
    	// Other procedures to call ...
    	// if ( "test".equals(sProcName) ) return test( screen, request, response );    	
    	return true ;
    }

    private boolean search( ScreenContext screen, ScreenRequest request, ScreenResponse response ) throws TelosysException
    {
		//System.out.println(" --- Proc 'search' " );
		
    	$DAO_CLASS dao = ($DAO_CLASS) getDAO(${beanClass.name}.class);
    	
		//----- 1) Create a query dynamically using the parameters received in the request
		ListQuery query = null ;		
		//System.out.println("request.hasParameters() : " + request.hasParameter() );
		if ( request.hasParameter() )
		{
    		// Search criteria => use them 
			Criteria criteria = new Criteria(SQL_CRITERIA);
			criteria.applyParameters( request.getParameterMap() );
			query = dao.createQuery(criteria); // dynamic query ( based on the criteria to use )
		}
		else
		{
    		// No criteria => select all
			query = dao.createQueryAll(); // all occurrences of the table
		}
		
		//----- 2) Execute the query
		$LIST_CLASS list = new ${LIST_CLASS}();
		
		
		//System.out.println("Execute the SQL COUNT Query : " + query.getSqlCount() );
		//--- 2.1) Just a count to be sure there's not too much occurrences in the response 
		int count = dao.count(query);
		if ( count > AppConst.SEARCH_MAX_ITEMS )
		{
			//--- 2.2) Too much occurrences => don't go forward
			String s = "Too much items : " + count + " > " + AppConst.SEARCH_MAX_ITEMS ;
			//System.out.println( s );
			response.addError( new ScreenError(1, s) );
		}
		else
		{
			//--- 2.2) Execute the real query to retrieve the data
			//System.out.println("Execute the SQL Query : " + query.getSqlSelect() );
			dao.loadList(query, list);
			//System.out.println("LIST : \n" + list);
		}
		
		response.setValue(AppConst.SEARCH_COUNT, list.size() );
		
		// If the list must be returned as a "Data Element" in the XML response => Add it in a "ScreenDataElements" object
		// ScreenDataElements dataElements = new ScreenDataElements();
		// dataElements.add(AppConst.SEARCH_RESULT, list );	
		// response.setDataElements(dataElements);
    	
		// If the list must be returned as a "View" generated by a renderer => just keep it as HttpRequest attribute
		response.expose(AppConst.SEARCH_RESULT, list);
		
    	return true ;
    }
}
